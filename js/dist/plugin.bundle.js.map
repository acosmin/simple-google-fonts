{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/src/constants.js","webpack:///./js/src/utils.js","webpack:///./js/src/components/global.js","webpack:///./js/src/components/info.js","webpack:///./js/src/index.js","webpack:///./js/src/styles.js","webpack:///./js/plugin.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","PLUGIN_INFO","wp","i18n","__","HEADINGS","TEXT_TRANSFORM","HEADINGS_TABS","title","className","newStyleLinkURL","items","link","ff","arguments","length","undefined","_items$map2","_slicedToArray","map","item","newItem","encodeURIComponent","replace","old","current","href","parseHeadingValues","heading","parsed","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","split","iterator","next","done","_item$split2","el","Number","err","return","stringifyHeadingValues","prop","keys","join","getHeadingValue","meta","defaults","concat","headings","sgf_els_headings","found","findIndex","startsWith","addGlobalHeadings","gvals","simpleGFonts","global_vals","gheadings","_toConsumableArray","components","Notice","ToggleControl","global_","SGFGlobalOption","props","isPublished","info","updateEl","React","createElement","label","checked","sgf_is_global","help","onChange","status","isDismissible","info_Notice","Fragment","element","info_","SGFInfoPanel","src_","PanelBody","TabPanel","SelectControl","RangeControl","Component","src_Fragment","editPost","PluginSidebar","PluginSidebarMoreMenuItem","data","withDispatch","withSelect","src_select","select","compose","uniq","lodash","src_SimpleGoogleFonts","SimpleGoogleFonts","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","apply","changeFontsWeights","_assertThisInitialized","changeTransform","changeLineHeight","changeLetterSpace","changeStyles","updateElement","similar","type","media","rel","default_url","elements","_objectSpread","tag","id","body_id","headings_id","style_id","_i2","elNode","document","elKeys","_i3","elKey","setAttribute","head","appendChild","createStyleNodes","panels","types","_i","panel","prevProps","google_fonts","font","f","v","filter","weight","includes","size","words","toUpperCase","capitalizeWords","src_objectSpread","getEditedPostAttribute","fontsObj","ffh","sgf_ff_headings","ffb","sgf_ff_body","hFont","bFont","styleTag","querySelector","hMeta","textContent","sgf_wt_body","sgf_lh_body","_loop","headingMeta","find","hParsed","wt","tt","lh","ls","sgf_ls_body","theStyles","getMeta","fontID","newstyles","def","idef","_simpleGFonts","timeout","weights_def","setTimeout","newLink","variants","oldFamily","decodeURIComponent","newFont","variant","weights","oldWeights","italics","italic","push","src_toConsumableArray","sort","_this$props","oldmeta","updateSingleMeta","updateHeadingsMeta","changeFW","args","_this2","sidebarId","pluginName","sidebarIcon","_this$props2","icon","isPinnable","initialOpen","options","fontsOptions","activeClass","tabs","tabName","weightsOptions","transformOptions","min","max","step","_extends","target","src","editor","postMeta","oldPostMeta","getCurrentPostAttribute","isCurrentPostPublished","pageID","getCurrentPostId","dispatch","newmeta","stringified","hdskey","converted","src_defineProperty","sgf_date_global","Date","now","toString","newHeadings","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","registerPlugin","plugins","render"],"mappings":"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","file":"plugin.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","const { __ } = wp.i18n;\n\nexport const PLUGIN_INFO = {\n    sidebarId   : 'sgf-sidebar',\n    sidebarIcon : 'editor-textcolor',\n    pluginName  : 'Simple Google Fonts',\n};\n\nexport const HEADINGS = [\n    'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\n];\n\nexport const FONT_WEIGHT = [\n    '100', '100i', \n    '200', '200i', \n    '300', '300i',\n    '400', '400i',\n    '500', '500i',\n    '600', '600i',\n    '700', '700i',\n    '800', '800i',\n    '900', '900i'\n];\n\nexport const TEXT_TRANSFORM = [\n    'none', 'capitalize', 'uppercase', 'lowercase'\n];\n\nexport const HEADINGS_TABS = [\n    {\n        name: 'h1',\n        title: 'h1',\n        className: 'tab-one',\n    },\n    {\n        name: 'h2',\n        title: 'h2',\n        className: 'tab-two',\n    },\n    {\n        name: 'h3',\n        title: 'h3',\n        className: 'tab-three',\n    },\n    {\n        name: 'h4',\n        title: 'h4',\n        className: 'tab-four',\n    },\n    {\n        name: 'h5',\n        title: 'h5',\n        className: 'tab-five',\n    },\n    {\n        name: 'h6',\n        title: 'h6',\n        className: 'tab-six',\n    },\n]","/**\n * Capitalizes the words in a string.\n *\n * @since   1.0.0\n * @param   {String} words\n * @returns {String}\n */\nexport const capitalizeWords = ( words ) => {\n    return words.replace( /\\b\\w/g, l => l.toUpperCase() );\n}\n\n/**\n * Makes sure the new <link/> url is encoded correctly\n *\n * @since   1.0.0\n * @param   {DOMNode} link      <link/> element\n * @param   {Array}   items     Old and current decoded elements\n * @param   {boolean} [ff=true] Should this be used for fonts or weights\n * @returns {String}            New <link/> URL\n */\nexport const newStyleLinkURL = ( items, link, ff = true ) => {\n    const [ old, current ] = items.map( item => {\n        let newItem = encodeURIComponent( item );\n        return ff ? newItem.replace( '%2B', '+' ) : newItem;\n    } );\n\n    return link.href.replace( old, current );\n}\n/**\n * Loop through the old meta and check if it has changed\n *\n * @since   1.0.0\n * @param   {Object} old     Old data\n * @param   {Object} current Current data\n * @returns {Object}         Reviewed data\n */\nexport const reviewedData = ( old, current ) => {\n    return Object.keys( current ).reduce( ( prev, key ) => {\n        if ( old[ key ] === current[ key ] ) {\n            return prev;\n        }\n\n        return {\n            ...prev,\n            [ key ]: current[ key ],\n        };\n    }, {} );\n}\n\n/**\n * Parses the a heading's meta values.\n * \n * @since   1.0.0\n * @param   {String} heading Meta value in this format `el:h1|wt:400|tt:none|lh:1.4|ls:0`\n * @returns {Object}         Parsed keys and values in an object\n */\nexport const parseHeadingValues = heading => {\n    let parsed = {}\n    \n    for( const item of heading.split( '|' ) ) {\n        let [ el, value ] = item.split( ':' );\n\n        switch( el ) {\n            case 'lh':\n            case 'ls':\n                value = Number( value );\n                break;\n        \n            default:\n                break;\n        }\n\n        parsed[ el ] = value;\n    }\n\n    return parsed;\n}\n\n/**\n * Undos `parseHeadingValues()`, converts it back to a string to be saved as meta.\n * It also changes a value for a selected key \n *\n * @since   1.0.0\n * @param   {Object} parsed Parsed meta value, from string to object\n * @param   {String} prop   Propriety, key in object\n * @param   {Mixed}  value  New value for the selected propriety\n * @returns {String}        Converts the new obeject into a string, `el:h1|wt:400|tt:none|lh:1.4|ls:0`\n */\nexport const stringifyHeadingValues = ( parsed, prop, value ) => {\n    return Object.keys( parsed ).map( item => { \n        if( item === prop ) {\n            return [ item, value ].join( ':' )\n        }\n\n        return [ item, parsed[ item ] ].join( ':' ) \n    } ).join( '|' );\n}\n\n/**\n * Gets a value for a specific heading from post meta\n *\n * @since   1.0.0\n * @param   {String} el   The heading, `h2` for example\n * @param   {String} prop The propriety to select, for example `wt` for weight\n * @param   {Object} meta Current post meta information\n * @returns {Mixed}       Meta value for the selected heading propriety or returns the default value for it\n */\nexport const getHeadingValue = ( el, prop, meta ) => {\n    const defaults = parseHeadingValues( `el:${el}|wt:400|tt:none|lh:1.4|ls:0` );\n    const headings = meta.sgf_els_headings;\n\n    if( headings.length ) {\n        const found = headings.findIndex( item => item.startsWith( el, 3 ) );\n\n        if( found === -1 ) {\n            return defaults[ prop ]\n        } else {\n            const converted = parseHeadingValues( headings[ found ] );\n            \n            return converted[ prop ]; \n        }\n    } else {\n        return defaults[ prop ];\n    }\n}\n\n/**\n * Creates 3 DOMNodes, 2 for `<link>`s and one `<style>` tag used to enqueue Google fonts and\n * inline styles. \n *\n * @since   1.0.0\n * @returns {Void}\n */\nexport const createStyleNodes = () => {\n    const similar = {\n        type  : 'text/css',\n        media : 'all',\n        rel   : 'stylesheet',\n        href  : simpleGFonts.default_url,\n    };\n\n    const elements = [\n        {\n            tag: 'link',\n            id: simpleGFonts.body_id,\n            ...similar \n        },\n        {\n            tag: 'link',\n            id: simpleGFonts.headings_id,\n            ...similar\n        },\n        {\n            tag: 'style',\n            id: simpleGFonts.style_id,\n            type: 'text/css'\n        }\n    ];\n\n    for( const element of elements ) {\n        const elNode = document.createElement( element.tag );\n        const elKeys = Object.keys( element );\n\n        for( const elKey of elKeys ) {\n            if( elKey === 'tag' ) continue;\n\n            elNode.setAttribute( elKey, element[ elKey ] );\n        }\n\n        document.head.appendChild( elNode );\n    }\n}\n\n/**\n * Makes sure to add globals if no heading styles are not set. Also solves an issue with\n * REST API not displaying defaults if `$single` is set to `false` in `register_meta()` \n *\n * @since   1.0.0\n * @param   {Object} meta \n * @returns {Void}\n */\nexport const addGlobalHeadings = meta => {\n    const { global_vals:gvals } = simpleGFonts;\n\n    if( ! meta.sgf_els_headings.length && gvals ) {\n        const { sgf_els_headings:gheadings } = gvals;\n\n        if( gheadings && gheadings.length ) {\n            meta.sgf_els_headings = [\n                ...gheadings\n            ];\n        }\n    }\n\n    return meta;\n}","const { Notice, ToggleControl } = wp.components;\n\nconst { __ } = wp.i18n;\n\n/**\n * Displays the global option and adds a notice if the post isn't published\n *\n * @since  1.0.0\n * @param  {Object} props Inherited props from `SimpleGoogleFonts`\n * @return {Void}\n */\nexport const SGFGlobalOption = props => {\n    const { isPublished } = props.info;\n    const { meta, updateEl } = props;\n    \n    if( ! isPublished ) {\n        return (\n            <Notice\n                className=\"sgf-globally-warning\" \n                status=\"warning\"\n                isDismissible={ false }\n            >\n                { __( 'You can not use this option if the post is not published. If the global option was enabled for this post and you switched to draft mode, you will have to enable it again after you publish.' ) }\n            </Notice>\n        );\n    }  \n    \n    return (\n        <ToggleControl\n            label={ __( 'Make styles global' ) }\n            checked={ meta.sgf_is_global || false  }\n            help={ __( 'Make the styles used for this post global? If the answer is yes, then the styles will apply globally as defaults for new posts and old posts that do not have any Google Fonts styles saved.' ) }\n            onChange={ value => updateEl( 'global', 'is', value ) }\n        />\n    );\n} \n","const { Notice } = wp.components;\n\nconst { Fragment } = wp.element;\n\nconst { __ } = wp.i18n;\n\n/**\n * Displays the information from the `Information` panel\n *\n * @since  1.0.0\n * @return {Void}\n */\nexport const SGFInfoPanel = () => {\n    const props = {\n        className     : 'sgf-information-notice',\n        status        : 'success',\n        isDismissible : false\n    };\n\n    return (\n        <Fragment>\n\n            <Notice { ...props } >\n                { __( 'It works only with posts and pages for now.' ) }\n            </Notice>\n\n            <Notice { ...props } >\n                { __( 'It is safe to say that if you do not have an Internet connection, Google fonts will not display (unless you have them installed on your system).' ) }\n            </Notice>\n\n            <Notice { ...props } >\n                { __( 'The plugin will dequeue other Google fonts registered by themes/plugins. WordPress Core registered styles are not dequeued. If you do not select a font, it will fallback to default system (OS) fonts.' ) }\n            </Notice>\n\n            <Notice { ...props } >\n                { __( 'If you want to use the global option, make sure you publish the post. If for some reason you switch the post to draft mode, the global option will reset and you will need to enable it again.' ) }\n            </Notice>\n\n        </Fragment>\n    );\n}","import fontsObj, * as fonts from './json/google-fonts.json';\n\nimport { \n    PLUGIN_INFO, \n    HEADINGS,\n    HEADINGS_TABS, \n    TEXT_TRANSFORM \n} from './constants';\n\nimport { \n    capitalizeWords, \n    newStyleLinkURL, \n    parseHeadingValues, \n    stringifyHeadingValues,\n    getHeadingValue,\n    createStyleNodes,\n    addGlobalHeadings\n} from './utils';\n\nimport { SGFGlobalOption } from './components/global';\n\nimport { SGFInfoPanel } from './components/info';\n\nimport theStyles from './styles';\n\nconst { __ } = wp.i18n;\n\nconst { \n    PanelBody, \n    TabPanel, \n    SelectControl, \n    RangeControl \n} = wp.components;\n\nconst { Component, Fragment } = wp.element;\n\nconst { PluginSidebar, PluginSidebarMoreMenuItem } = wp.editPost;\n\nconst { withDispatch, withSelect, select } = wp.data;\n\nconst { compose } = wp.compose;\n\nconst { uniq } = lodash;\n\n/**\n * Simple Google Fonts\n * \n * @since   1.0.0\n * @class   SimpleGoogleFonts\n * @extends {Component}\n */\nclass SimpleGoogleFonts extends Component {\n\n    /**\n     * Creates an instance of SimpleGoogleFonts.\n     * \n     * @memberof SimpleGoogleFonts\n     */\n    constructor() {\n        super( ...arguments );\n\n        this.changeFontsWeights = this.changeFontsWeights.bind( this );\n        this.changeTransform    = this.changeTransform.bind( this );\n        this.changeLineHeight   = this.changeLineHeight.bind( this );\n        this.changeLetterSpace  = this.changeLetterSpace.bind( this );\n        this.changeStyles       = this.changeStyles.bind( this );\n        this.updateElement      = this.updateElement.bind( this );\n    }\n\n    /**\n     * Do this once when the component did mount\n     *\n     * @todo     Maybe add some filters in future versions.\n     * @memberof Component\n     */\n    componentDidMount() {\n        // Create the link and style nodes\n        createStyleNodes();\n\n        // Change fonts and weights in the Google Fonts URL\n        const panels = [ 'body', 'headings' ];\n        const types  = [ 'fonts', 'weights' ];\n\n        for( const panel of panels ) {\n            for( const type of types ) {\n                this.changeFontsWeights( panel, type );\n            }\n        }\n\n        // Make sure we have the correct/updated styles\n        this.changeStyles();\n    }\n\n    /**\n     * Do some checks\n     *\n     * @todo     Maybe take another look at this.\n     * @param    {Object} prevProps\n     * @memberof SimpleGoogleFonts\n     */\n    componentDidUpdate( prevProps ) {\n        const { meta } = this.props;\n        const { isPublished } = this.props.info;\n        const { isPublished:isPublishedPrev } = prevProps.info;\n\n        if( isPublished !== isPublishedPrev ) {\n            if( isPublished === false && meta.sgf_is_global === true ) {\n                this.updateElement( 'global', 'is', false );\n            }\n        }\n    }\n\n    /**\n     * All the font families as options to be used in a <select> element \n     * \n     * @since   1.0.0\n     * @returns {Array} The label and index as its value\n     */\n    fontsOptions() {\n        return fontsObj.map( ( font, i ) => ( { label: font.f, value: i } ) );\n    }\n\n    /**\n     * All the font weights as options to be used in a <select> element \n     *\n     * @since   1.0.0\n     * @param   {Integer} font Font intex\n     * @returns {Array}        The label and weight\n     */\n    weightsOptions( font ) {\n        return fontsObj[ font ].v\n        .filter( weight => ! weight.includes( '0i' ) )\n        .map( weight => {\n            return { label: weight, value: weight }\n        } );\n    }\n\n    /**\n     * All the text transform options to be used in a <select> element \n     * \n     * @since   1.0.0\n     * @returns {Array} The label and transform\n     */\n    transformOptions() {\n        return TEXT_TRANSFORM.map( size => ( { label: capitalizeWords( size ), value: size } ) );\n    }\n\n    /**\n     * Get meta value\n     *\n     * @since   1.0.0\n     * @param   {String} item  Select a specific key from our post meta\n     * @param   {String} panel The panel in which this option is located\n     * @returns {Object}       Selected meta\n     */\n    getMeta( item, panel ) {\n        const newmeta = select('core/editor').getEditedPostAttribute( 'meta' );\n\n        let meta = {\n            ...newmeta\n        }\n\n        meta = addGlobalHeadings( meta );\n\n        if( item && panel ) {\n            return meta[ `sgf_${item}_${panel}` ];\n        }\n\n        return meta;\n    }\n\n    /**\n     * Changes the styles for preview, check `../js/src/styles/`\n     *\n     * @since  1.0.0\n     * @return {Void}\n     */\n    changeStyles() {\n        theStyles( this.getMeta(), fontsObj );\n    }\n\n    /**\n     * Changes the font families and font weights based on the selected values\n     *\n     * @since   1.0.0\n     * @todo    Simplify the weights part, create a function for both.\n     * @param   {String}         panel Either `headings` or `body`\n     * @param   {String}         type  Either change `fonts` or `weights`\n     * @returns {Object|Boolean}              An object containing the new/current link and decoded family argument \n     *                                        or false if no font is selected.\n     */\n    changeFontsWeights( panel, type ) {\n        const link      = document.querySelector( `#${simpleGFonts[ `${panel}_id` ]}` );\n        const meta      = this.getMeta;\n        const fontID    = meta( 'ff', panel );\n        const newstyles = this.changeStyles;\n        const def       = '400';\n        const idef      = `${def}i`;\n\n        const { timeout, default_url, weights_def } = simpleGFonts;\n        \n        if( fontID === 0 ) {\n            link.href = default_url;\n            setTimeout( newstyles, timeout );\n\n            return false;\n        }\n\n        const variants = fontsObj[ fontID ].v;\n\n        let newLink;\n\n        const oldFamily = decodeURIComponent( link.href.split( '?' )[ 1 ] )\n        .split( '&' )[ 0 ]\n        .split( '=' )[ 1 ];\n\n        switch( type ) {\n            case 'fonts':\n                let newFont = fontsObj[ fontID ].f.replace( ' ', '+' ) + `:${def}`;\n\n                if( variants.find( variant => variant.includes( idef ) ) ) {\n                    newFont = `${newFont},${idef}`;\n                }\n\n                newLink = newStyleLinkURL( [ oldFamily, newFont ], link );\n                break;\n\n            case 'weights':\n                const oldWeights = oldFamily.split( ':' )[ 1 ];\n                let weights;\n\n                switch( panel ) {\n                    case 'headings':\n                        weights = meta( 'els', panel )\n                        .map( heading => parseHeadingValues( heading ) )\n                        .map( heading => heading.wt );\n\n                        weights = uniq( weights );\n\n                        let italics = [];\n\n                        for( const weight of weights ) {\n                            const italic = variants.find( variant => variant.includes( `${weight}i` ) );\n\n                            if( italic ) {\n                                italics.push( italic );\n                            }\n                        }\n\n                        if( weights_def ) {\n                            if( weights.find( weight => weight !== def ) ) {\n                                weights.push( def );\n                            }\n    \n                            if( weights.find( weight => weight !== idef ) ) {\n                                if( variants.find( variant => variant.includes( idef ) ) ) {\n                                    weights.push( idef );\n                                }\n                            }\n                        }\n\n                        weights = [ ...weights, ...italics ].sort().join( ',' );\n\n                        newLink = newStyleLinkURL( [ oldWeights, weights ], link, false );\n                        break;\n        \n                    case 'body':\n                        let weight = meta( 'wt', panel );\n                        weights = [];\n\n                        weights.push( weight );\n\n                        const italic = variants.findIndex( variant => \n                            variant.includes( `${weight}i` ) \n                        );\n\n                        if( italic !== -1 ) {\n                            weights.push( `${variants[ italic ]}` );\n                        }\n\n                        if( weights_def ) {\n                            if( weight !== def ) {\n                                weights.push( def );\n                            }\n\n                            if( variants.findIndex( variant => variant.includes( idef ) ) !== -1 ) {\n                                weights.push( idef );\n                            }\n                        }\n\n                        newLink = newStyleLinkURL( \n                            [ oldWeights, weights.sort().join( ',' ) ], \n                            link, false \n                        );\n                        break;\n        \n                    default:\n                        break;\n                }\n                break;\n\n            default:\n                break;\n        }\n\n        link.href = link.href.replace( link.href, newLink );\n\n        setTimeout( newstyles, timeout );\n\n        return { newLink, link, oldFamily };\n    }\n\n    /**\n     * Wrapper for changeStyles(), in case we need to add something later\n     *\n     * @since  1.0.0\n     * @return {Void}\n     */\n    changeTransform() {\n        this.changeStyles();\n    }\n\n    /**\n     * Wrapper for changeStyles(), in case we need to add something later\n     *\n     * @since  1.0.0\n     * @return {Void}\n     */\n    changeLineHeight() {\n        this.changeStyles();\n    }\n\n    /**\n     * Wrapper for changeStyles(), in case we need to add something later\n     *\n     * @since  1.0.0\n     * @return {Void}\n     */\n    changeLetterSpace() {\n        this.changeStyles();\n    }\n\n    /**\n     * Updates meta value on event\n     *\n     * @since  1.0.0\n     * @param  {String}  panel           The panel where this is used\n     * @param  {String}  type            Propriety type\n     * @param  {Mixed}   value           Depending on the component, it can be a string a boolean\n     * @param  {Boolean} [heading=false] Update headings meta?\n     * @return {Void}\n     */\n    updateElement( panel, type, value, heading = false ) {\n        const { meta, oldmeta, updateSingleMeta, updateHeadingsMeta } = this.props;\n        const changeFW = this.changeFontsWeights;\n        const args = { panel, type, value };\n\n        if( ! heading ) {\n            updateSingleMeta( args, meta, oldmeta );\n        } else {\n            const hargs = { el: panel, prop: type, value }\n\n            updateHeadingsMeta( hargs, meta, oldmeta );\n        }\n\n        if( [ 'ff', 'wt' ].find( prop => prop === type ) ) {\n            if( 'wt' === type ) {\n                const wt = 'weights';\n                if( HEADINGS.find( heading => heading === panel ) ) {\n                    changeFW( 'headings', wt );\n                } else {\n                    changeFW( panel, wt );\n                }\n            }\n\n            if( 'ff' === type ) {\n                changeFW( panel, 'fonts' );\n            }\n        }\n\n        switch( type ) {\n            case 'lh':\n                this.changeLineHeight();\n                break;\n            case 'ls':\n                this.changeLetterSpace();\n                break;\n            case 'tt':\n                this.changeTransform();\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Render the damn thing\n     * \n     * @todo     Use <Autocomplete/> for selecting fonts\n     * @memberof Component|SimpleGoogleFonts\n     */\n    render() {\n        const { sidebarId, pluginName, sidebarIcon } = PLUGIN_INFO;\n        const { meta, info } = this.props;\n        const updateEl = this.updateElement;\n\n        return (\n            <Fragment>\n\n                <PluginSidebar\n                    name={ sidebarId }\n                    title={ pluginName }\n                    icon={ sidebarIcon }\n                    isPinnable={ true }\n                >\n\n                    { /* /////////// Headings panel /////////// */}\n                    <PanelBody title={ __( 'Headings' ) } initialOpen={ false }>\n                        <SelectControl \n                            label={ __( 'Headings font family' ) }\n                            value={ meta.sgf_ff_headings || 0 }\n                            options={ this.fontsOptions() }\n                            onChange={ value => updateEl( 'headings', 'ff', value ) }\n                        />\n\n                        { /* ////// Headings tabs ////// */ }\n                        <TabPanel className=\"sgf-headings-tabs\"\n                            activeClass=\"active-tab\"\n                            tabs={ HEADINGS_TABS }>\n                            {\n                                ( tabName ) => (\n                                    <Fragment>\n                                        { /* /// Headings: Font weight /// */ }\n                                        <SelectControl \n                                            label={ __( 'Font weight:' ) }\n                                            value={ getHeadingValue( tabName, 'wt', meta ) }\n                                            options={ this.weightsOptions( meta.sgf_ff_headings ) }\n                                            onChange={ value => updateEl( tabName, 'wt', value, true ) }\n                                        />\n                                        \n                                        { /* /// Headings: Text transform /// */ }\n                                        <SelectControl \n                                            label={ __( 'Text transform:' ) }\n                                            value={ getHeadingValue( tabName, 'tt', meta ) }\n                                            options={ this.transformOptions() }\n                                            onChange={ value => updateEl( tabName, 'tt', value, true ) }\n                                        />\n\n                                        { /* /// Headings: Line height /// */ }\n                                        <RangeControl \n                                            label={ __( 'Line height:' ) }\n                                            value={ getHeadingValue( tabName, 'lh', meta ) }\n                                            min={ 1 }\n                                            max={ 3 }\n                                            step={ 0.05 }\n                                            onChange={ value => updateEl( tabName, 'lh', value, true ) }\n                                        />\n\n                                        { /* /// Headings: Letter spacing /// */ }\n                                        <RangeControl \n                                            label={ __( 'Letter spacing:' ) }\n                                            value={ getHeadingValue( tabName, 'ls', meta ) }\n                                            min={ 0 }\n                                            max={ 3 }\n                                            step={ 0.01 }\n                                            onChange={ value => updateEl( tabName, 'ls', value, true ) }\n                                        />\n                                    </Fragment>\n                                )\n                            }\n                        </TabPanel>\n\n                    </PanelBody>\n  \n                    { /* /////////// Body Panel /////////// */}\n                    <PanelBody title={ __( 'Body' ) } initialOpen={ false }>\n                        \n                        { /* /// Body: Font family /// */ }\n                        <SelectControl \n                            label={ __( 'Body font family' ) }\n                            value={ meta.sgf_ff_body || 0 }\n                            options={ this.fontsOptions() }\n                            onChange={ value => updateEl( 'body', 'ff', value ) }\n                        />\n                        \n                        { /* /// Body: Font weight /// */ }\n                        <SelectControl \n                            label={ __( 'Font weight:' ) }\n                            value={ meta.sgf_wt_body || 0 }\n                            options={ this.weightsOptions( meta.sgf_ff_body ) }\n                            onChange={ value => updateEl( 'body', 'wt', value ) }\n                        />\n\n                        { /* /// Body: Line height /// */ }\n                        <RangeControl \n                            label={ __( 'Line height:' ) }\n                            value={ meta.sgf_lh_body || 1.8 }\n                            min={ 1 }\n                            max={ 3 }\n                            step={ 0.05 }\n                            onChange={ value => updateEl( 'body', 'lh', value ) }\n                        />\n\n                        { /* /// Body: Letter spacing /// */ }\n                        <RangeControl \n                            label={ __( 'Letter spacing:' ) }\n                            value={ meta.sgf_ls_body || 0 }\n                            min={ 0 }\n                            max={ 3 }\n                            step={ 0.01 }\n                            onChange={ value => updateEl( 'body', 'ls', value ) }\n                        />\n                        \n                    </PanelBody>\n\n                    { /* /////////// Global Options Panel /////////// */}\n                    <PanelBody title={ __( 'Global Options' ) } initialOpen={ false }>\n                        \n                        <SGFGlobalOption { ...this.props } updateEl={ this.updateElement } />\n\n                    </PanelBody>\n\n                    { /* /////////// Information Panel /////////// */}\n                    <PanelBody title={ __( 'Information' ) } initialOpen={ false }>\n                        \n                        <SGFInfoPanel />\n\n                    </PanelBody>\n\n\t            </PluginSidebar>\n\n                <PluginSidebarMoreMenuItem\n                    target={ PLUGIN_INFO.sidebarId }\n                    icon={ PLUGIN_INFO.sidebarIcon }\n                >\n                    { PLUGIN_INFO.pluginName }\n                </PluginSidebarMoreMenuItem>\n\n            </Fragment>\n        );\n    }\n}\n\nexport default compose( [\n\n    withSelect( select => {\n        const editor      = select( 'core/editor' );\n        const postMeta    = editor.getEditedPostAttribute( 'meta' );\n        const oldPostMeta = editor.getCurrentPostAttribute( 'meta' );\n        const isPublished = editor.isCurrentPostPublished();\n        const pageID      = editor.getCurrentPostId();\n\n        let info = {\n            meta    : { ...oldPostMeta, ...postMeta },\n            oldmeta : oldPostMeta,\n            info    : { pageID, isPublished }\n        };\n\n        info.meta = addGlobalHeadings( info.meta );\n\n        return info;\n    } ),\n    \n    withDispatch( dispatch => ( {\n\n        /**\n         * Updates meta for headings, `single` is set to `false` in `register_meta()` and this \n         * function will make sure it updates the correct string based on `el`\n         *\n         * @since  1.0.0\n         * @todo   Maybe use state for headings defaults \n         * @param  {Object} elements An object with some info `{ el, prop, value }`\n         * @param  {Object} newmeta  Updated/new meta\n         * @param  {Object} oldmeta  Previous meta\n         * @return {Void}\n         */\n        updateHeadingsMeta( elements, newmeta ) {\n            const { el, prop, value } = elements;\n\n            const stringified = stringifyHeadingValues;\n            const parsed      = parseHeadingValues;\n\n            const defaults = parsed( `el:${el}|wt:400|tt:none|lh:1.4|ls:0` );\n            const hdskey   = 'sgf_els_headings';\n            const headings = newmeta[ hdskey ];\n\n            let meta = {\n                ...newmeta\n            };\n\n            if( headings.length ) {\n                const found = headings.findIndex( item => item.startsWith( el, 3 ) );\n                \n                meta[ hdskey ] = [ ...headings ];\n\n                if( found === -1 ) {\n                    defaults[ prop ] = value;\n\n                    meta[ hdskey ].push( \n                        stringified( defaults )\n                    );\n                } else {\n                    let converted = parsed( headings[ found ] );\n                    \n                    converted[ prop ] = value;\n\n                    meta[ hdskey ][ found ] = stringified( converted );\n                }\n            } else {\n                meta[ hdskey ] = [];\n\n                defaults[ prop ] = value;\n\n                meta[ hdskey ].push( \n                    stringified( defaults ) \n                );\n            }\n\n            dispatch( 'core/editor' ).editPost( { meta } );\n        },\n\n        /**\n         * Updates meta for single components, `single` is set to `true` in `register_meta()` \n         *\n         * @since  1.0.0\n         * @param  {Object} elements An object with some info `{ panel, type, value }`\n         * @param  {Object} newmeta  Updated/new meta\n         * @param  {Object} oldmeta  Previous meta\n         * @return {Void}\n         */\n        updateSingleMeta( elements, newmeta ) {\n            let { panel, type, value } = elements;\n            const defaultWt = '400';\n\n            if( type === 'ff' ){\n                value = Number( value ); \n            }\n\n            let meta = {\n                ...newmeta,\n                [ `sgf_${type}_${panel}` ]: value\n            };\n\n            if( panel === 'global' && type === 'is' ) {\n                meta.sgf_date_global = meta.sgf_is_global ? Date.now().toString() : '';\n            }\n\n            if( panel === 'body' && type === 'ff' ) {\n                meta.sgf_wt_body = defaultWt\n            }\n\n            if( panel === 'headings' && type === 'ff' ) {\n                const { sgf_els_headings:headings } = meta;\n\n                if( headings.length ) {\n                    let newHeadings = [];\n\n                    for( const heading of headings ) {\n                        const converted = parseHeadingValues( heading );\n\n                        newHeadings.push( stringifyHeadingValues( converted, 'wt', defaultWt ) );\n                    }\n\n                    meta.sgf_els_headings = newHeadings;\n                }\n            }\n            \n            dispatch( 'core/editor' ).editPost( { meta } );\n        }\n\n    } ) )\n] )( SimpleGoogleFonts ); ","import { HEADINGS } from './constants';\nimport { parseHeadingValues as parsed } from './utils';\n\n/**\n * Creates the inline CSS styles based on the meta information it receives\n *\n * @since  1.0.0\n * @param  {Object} meta     Current post meta\n * @param  {Object} fontsObj Google Fonts object from JSON \n * @return {Void}\n */\nexport default function theStyles( meta, fontsObj ) {\n    const { sgf_ff_headings:ffh, sgf_ff_body:ffb } = meta;\n    \n    const hFont    = fontsObj[ ffh ].f;\n    const bFont    = fontsObj[ ffb ].f;\n    const styleTag = document.querySelector( `#${simpleGFonts[ 'style_id' ]}` );\n    const hMeta    = meta.sgf_els_headings;\n\n    styleTag.textContent = '';\n\n    if( ffb !== 0 || ffh !== 0 ) {\n        styleTag.textContent += `\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"],\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"block-list__block\"] {\n                    font-weight: 400 !important;\n                    font-style: normal;\n                }\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h1,\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h2,\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h3,\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h4,\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h5,\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h6,\n                body.gutenberg-editor-page .editor-post-title__block .editor-post-title__input {\n                    font-weight: 400 !important;\n                    font-style: normal;\n                }`;\n    }\n\n    if( ffb !== 0 ) {\n        styleTag.textContent += `\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"],\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"block-list__block\"],\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] *,\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"block-list__block\"] *,\n            body.gutenberg-editor-page .editor-post-title__block .editor-post-title__input,\n            body.gutenberg-editor-page .editor-default-block-appender__content {\n                font-family: '${ bFont }', sans-serif !important;\n            }`;\n    }\n    \n    if( ffh !== 0 ) {\n        styleTag.textContent += `\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h1,\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h2,\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h3,\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h4,\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h5,\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h6,\n            body.gutenberg-editor-page .editor-post-title__block .editor-post-title__input,\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h1 *,\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h2 *,\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h3 *,\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h4 *,\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h5 *,\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] h6 *,\n            body.gutenberg-editor-page .editor-post-title__block .editor-post-title__input * {\n                font-family: '${ hFont }', sans-serif !important;\n            }`;\n    }\n\n    if( meta.sgf_wt_body !== '400' ) { // recheck default\n        styleTag.textContent += `\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"],\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"block-list__block\"],\n            body.gutenberg-editor-page .editor-default-block-appender__content {\n                font-weight: ${ meta.sgf_wt_body } !important;\n            }\n        `;\n    }\n\n    if( meta.sgf_lh_body !== 1.8 ) {\n        styleTag.textContent += `\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"],\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"block-list__block\"],\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] p,\n            body.gutenberg-editor-page .editor-block-list__block div[class*=\"block-list__block\"] p {\n                line-height: ${ meta.sgf_lh_body } !important;\n            }\n        `;\n    }\n\n    for( const heading of HEADINGS ) {\n        const headingMeta = hMeta.find( item => item.startsWith( heading, 3 ) );\n        const hParsed     = headingMeta ? parsed( headingMeta ) : false;\n\n        if( hParsed && hParsed.wt !== '400' ) { // recheck default\n            if( heading === 'h1' ) {\n                styleTag.textContent += `\n                    body.gutenberg-editor-page .editor-post-title__block .editor-post-title__input {\n                        font-weight: ${ hParsed.wt } !important;\n                    }\n                `;\n            }\n            styleTag.textContent += `\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"block-list__block\"] ${ heading },\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] ${ heading } {\n                    font-weight: ${ hParsed.wt } !important;\n                    \n                }\n            `;\n        }\n\n        if( hParsed && hParsed.tt !== 'none' ) {\n            if( heading === 'h1' ) {\n                styleTag.textContent += `\n                    body.gutenberg-editor-page .editor-post-title__block .editor-post-title__input {\n                        text-transform: ${ hParsed.tt } !important;\n                    }\n                `;\n            }\n            styleTag.textContent += `\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] ${ heading } {\n                    text-transform: ${ hParsed.tt } !important;\n                }\n            `;\n        }\n\n        if( hParsed && hParsed.lh !== 1.4 ) {\n            if( heading === 'h1' ) {\n                styleTag.textContent += `\n                    body.gutenberg-editor-page .editor-post-title__block .editor-post-title__input {\n                        line-height: ${ hParsed.lh } !important;\n                    }\n                `;\n            }\n            styleTag.textContent += `\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] ${ heading } {\n                    line-height: ${ hParsed.lh } !important;\n                }\n            `;\n        }\n\n        if( hParsed && hParsed.ls !== 0 ) {\n            if( heading === 'h1' ) {\n                styleTag.textContent += `\n                    body.gutenberg-editor-page .editor-post-title__block .editor-post-title__input {\n                        letter-spacing: ${ hParsed.ls }em !important;\n                    }\n                `;\n            }\n            styleTag.textContent += `\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] ${ heading } {\n                    letter-spacing: ${ hParsed.ls }em !important;\n                }\n            `;\n        }\n\n        if( meta.sgf_ls_body !== 0 ) {\n            styleTag.textContent += `\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"],\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"block-list__block\"],\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"wp-block-\"] p,\n                body.gutenberg-editor-page .editor-block-list__block div[class*=\"block-list__block\"] p {\n                    letter-spacing: ${ meta.sgf_ls_body }em !important;\n                }\n            `;\n        }\n    }\n}","/////////////////////////////////////////////////\n////////////// Simple Google Fonts //////////////\n/////////////////////////////////////////////////\n\nimport '../css/src/plugin.scss';\nimport { default as plugin } from './src';\n\nconst { registerPlugin } = wp.plugins;\n\n/** \n * Register the plugin \n */\nregisterPlugin( 'simple-google-fonts', {\n\ticon   : 'hidden',\n\trender : plugin\n} );"],"sourceRoot":""}